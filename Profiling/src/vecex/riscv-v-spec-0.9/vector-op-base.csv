Mnemonic,Category,V operands,G operands,Description,Src Type,Dst Type (dst_width = src_width),Dst Type (dst_width = 2*src_width),Dst Type (dst_width = src_width / 2),Scalar dst behavior (m = 00)
VADD.X,arith,2,0,add,S/U,S/U,ILLEGAL,ILLEGAL,First Element
"VFADD.[H,S,D]",arith,2,0,add,F,F,ILLEGAL,ILLEGAL,First Element
VADDI.X,arith,1,0,add immediate,S/U,S/U,ILLEGAL,ILLEGAL,First Element
VPOPC,arith,1,0,count bits set,I,I,ILLEGAL,ILLEGAL,First Element
VSUB.X,arith,2,0,subtract,I,I,ILLEGAL,ILLEGAL,First Element
"VFSUB.[H,S,D]",arith,2,0,subtract,F,F,ILLEGAL,ILLEGAL,First Element
VNEG.X,arith,1,0,negate,S/U,S/U,ILLEGAL,ILLEGAL,First Element
VSEQ.X,compare,2,0,"1 if ==, else 0",S/U,I,I,ILLEGAL,First Element
VFEQ.[H.S.D],compare,2,0,"1 if ==, else 0",F,I,I,ILLEGAL,First Element
VSGE.X,compare,2,0,"1 if >=, else 0",S/U,I,I,ILLEGAL,First Element
"VFLE.[H,S,D]",compare,2,0,"1 if <=, else 0",F,I,I,ILLEGAL,First Element
VSLT.X,compare,2,0,"1 if <, else 0",S/U,ן,I,ILLEGAL,First Element
"VFLT.[H,S,D]",compare,2,0,"1 if <, else 0",F,ן,I,ILLEGAL,First Element
VSNE.X,compare,2,0,"1 if <>, else 0",S/U,ן,I,ILLEGAL,First Element
"VFNE.[H,S,D]",compare,2,0,"1 if <>, else 0",F,ן,I,ILLEGAL,First Element
"VFCVT.[X,H,S,D].[X,H,S,D]",convert,1,1,convert type,"S/U,F","F,S/U",ILLEGAL,ILLEGAL,First Element
"VFSGNJ.[H,S,D]",copy/sign,2,0,FP sign injection,F,F,ILLEGAL,ILLEGAL,First Element
"VFSGNJN.[H,S,D]",copy/sign,2,0,FP inverted sign injection,F,F,ILLEGAL,ILLEGAL,First Element
"VFSGNJX.[H,S,D]",copy/sign,2,0,FP xor sign,F,F,ILLEGAL,ILLEGAL,First Element
VDIV.X[U],divsqrt,2,0,divide,S/U,S/U,ILLEGAL,ILLEGAL,First Element
"VFDIV[H,S,D]",divsqrt,2,0,divide,F,F,ILLEGAL,ILLEGAL,First Element
VREM.X[U],divsqrt,2,0,partial remainder,S/U,S/U,ILLEGAL,ILLEGAL,First Element
"VFREM.[H,S,D]",divsqrt,2,0,partial remainder,F,F,ILLEGAL,ILLEGAL,First Element
"VFSQRT.[H,S,D]",divsqrt,1,0,square root,F,F,ILLEGAL,ILLEGAL,First Element
"VFCLASS.[H,S,D]",identify FP,1,0,"FP value class (e.g., 0, inf)",F,F,ILLEGAL,ILLEGAL,First Element
"VL.[B,H,W,D][U]",load,0,1,load vector (unit stride),I,B,ILLEGAL,ILLEGAL,First Element
"VFL.[H,S,D]",load,0,1,load vector (unit stride),I,F,ILLEGAL,ILLEGAL,First Element
"VLS.[B,H,W,D][U]",load,0,2,load vector (stride),I,B,ILLEGAL,ILLEGAL,First Element
"VFLS.[H,S,D]",load,0,2,load vector (stride),I,F,ILLEGAL,ILLEGAL,First Element
"VLX.[B,H,W,D][U]",load,1,1,load vector indexed (gather),I,B,ILLEGAL,ILLEGAL,First Element
"VFLX.[H,S,D]",load,1,1,load vector indexed (gather),I,F,ILLEGAL,ILLEGAL,First Element
VAND,logical,2,0,bitwise AND,B,B,ILLEGAL,ILLEGAL,Reduction
VANDI,logical,1,0,bitwise AND with immediate,B,B,ILLEGAL,ILLEGAL,Reduction
VOR,logical,2,0,bitwise OR,B,B,ILLEGAL,ILLEGAL,Reduction
VORI,logical,1,0,bitwise OR with immediate,B,B,ILLEGAL,ILLEGAL,Reduction
VXOR,logical,2,0,bitwise XOR,B,B,ILLEGAL,ILLEGAL,Reduction
VXORI,logical,1,0,bitwise XOR with immediate,B,B,ILLEGAL,ILLEGAL,Reduction
VMFIRST,mask,1,0,index of first TRUE lab -> GPR,B,B,ILLEGAL,ILLEGAL,GPR
VMPOP,mask,1,0,Count lsb of elements -> GPR,B,B,ILLEGAL,ILLEGAL,GPR
"VMADD.X[U]",multiply-add,2,0,Destructive multiply add,S/U,S/U,S/U,ILLEGAL,First Element
"VFMADD.[H,S,D]",multiply-add,3,0,Multiply add,F,F,F,ILLEGAL,First Element
"VFMSUB.[H,S,D]",multiply-add,3,0,Multiply subtract,F,F,F,ILLEGAL,First Element
VMUL.X[U],multiply-add,2,0,Multiply,S/U,S/U,ILLEGAL,ILLEGAL,First Element
"VFMUL.[H,S,D]",multiply-add,2,0,Multiply,F,F,ILLEGAL,ILLEGAL,First Element
VMULH.X[U],multiply-add,2,0,Multiply - return high half,S/U,S/U,ILLEGAL,S/U,First Element
VEXTRACT,permute,1,1,extract element -> GPR,B,B,ILLEGAL,ILLEGAL,GPR
VFEXTRACT,permute,1,1,extract element -> GPR,B,B,ILLEGAL,ILLEGAL,FPR
VINSERT,permute,1,2,insert element(s) from GPR,B,B,ILLEGAL,ILLEGAL,First Element
VFINSERT,permute,1,2,insert element(s) from FPR,B,B,ILLEGAL,ILLEGAL,First Element
VMERGE,permute,2,0,merge registers,B,B,ILLEGAL,ILLEGAL,First Element
VSELECT,permute,2,0,select from source by indicies,B,B,ILLEGAL,ILLEGAL,First Element
VSLIDEDOWN,permute,1,1,shift elements down by index,B,B,ILLEGAL,ILLEGAL,First Element
VSLIDEUP,permute,1,1,shift elements up by index,B,B,ILLEGAL,ILLEGAL,First Element
VRGATHER,permute,2,0,gather elements from vector register,B,B,ILLEGAL,ILLEGAL,First Element
VCLIP,round,1,1,clip to narrow,S/U,S/U,ILLEGAL,S/U,First Element
VCLIPI,round,1,0,"Clip, shift by imm",S/U,S/U,ILLEGAL,S/U,First Element
VMAX.X,select,2,0,return max element,S/U,S/U,ILLEGAL,ILLEGAL,First Element
"VFMAX.[H,S,D]",select,2,0,return max element,F,F,ILLEGAL,ILLEGAL,First Element
VMIN.X,select,2,0,return min element,S/U,S/U,ILLEGAL,ILLEGAL,First Element
"VFMIN.[H,S,D]",select,2,0,return min element,F,F,ILLEGAL,ILLEGAL,First Element
VREDSUM.X,reduction,1,0,sum reduction,S/U,S/U,ILLEGAL,ILLEGAL,Reduction
VREDMIN.X[U],reduction,1,0,min reduction,S/U,S/U,ILLEGAL,ILLEGAL,Reduction
VREDMAX.X[U],reduction,1,0,max reduction,S/U,S/U,ILLEGAL,ILLEGAL,Reduction
VREDAND.X,reduction,1,0,and reduction,S/U,S/U,ILLEGAL,ILLEGAL,Reduction
VREDOR.X,reduction,1,0,or reduction,S/U,S/U,ILLEGAL,ILLEGAL,Reduction
VREDXOR.X,reduction,1,0,xor reduction,S/U,S/U,ILLEGAL,ILLEGAL,Reduction
"VFREDSUM.[H,S,D]",reduction,1,0,sum reduction,F,F,ILLEGAL,ILLEGAL,Reduction
"VFREDMIN.[H,S,D]",reduction,1,0,min reduction,F,F,ILLEGAL,ILLEGAL,Reduction
"VFREDMAX.[H,S,D]",reduction,1,0,max reduction,F,F,ILLEGAL,ILLEGAL,Reduction
VSL,shift,2,0,Shift Left,I,B,ILLEGAL,ILLEGAL,First Element
VSLI,shift,1,0,shift left by immediate,I,B,ILLEGAL,ILLEGAL,First Element
VSRA,shift,2,0,Shift Right (arithmetic),I,B,ILLEGAL,ILLEGAL,First Element
VSRAI,shift,1,0,arithmetic shift right by immediate,I,B,ILLEGAL,ILLEGAL,First Element
VSRL,shift,2,0,Shift Right (logical),I,B,ILLEGAL,ILLEGAL,First Element
VSRLI,shift,1,0,logical shift right by immediate,I,B,ILLEGAL,ILLEGAL,First Element
"VS.[B,H,W,D][U]",store,1,1,store vector (unit stride),I,B,ILLEGAL,ILLEGAL,Write First Element
"VSS.[B,H,W,D][U]",store,1,2,store vector (stride),I,B,ILLEGAL,ILLEGAL,Write First Element
"VSX.[B,H,W,D][U]",store,2,1,store vector indexed (scatter),I,B,ILLEGAL,ILLEGAL,Write First Element
